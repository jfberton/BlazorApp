name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Usar la rama master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Actualizado a v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3  # Actualizado a v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./BlazorApp.csproj  # Ruta correcta

      - name: Build the app
        run: dotnet build --configuration Release ./BlazorApp.csproj  # Ruta correcta

      - name: Run tests
        run: dotnet test --verbosity normal ./BlazorApp.Test/BlazorApp.Test.csproj  # Ruta correcta

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Cache SonarCloud packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar

      - name: Install SonarCloud Scanner
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner.zip
          echo "$(pwd)/sonar-scanner-4.6.2.2472-linux/bin" >> $GITHUB_PATH

      
      - name: Run SonarCloud analysis
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         JAVA_HOME: /opt/hostedtoolcache/Java_Adopt_jdk/17.0.11-9/x64
        run: |
         sonar-scanner \
           -Dsonar.projectKey=jfberton_BlazorApp  \
           -Dsonar.organization=jfberton  \
           -Dsonar.host.url=https://sonarcloud.io \
           -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      - name: Publish the app
        run: dotnet publish --configuration Release --output ./publish ./BlazorApp.csproj  # Ruta correcta

      - name: Build Docker image
        run: docker build -t myblazorapp:latest ./  # Construir la imagen desde el directorio correcto

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag Docker image
        run: docker tag myblazorapp:latest "${{ secrets.DOCKER_USERNAME }}"/myblazorapp:latest

      - name: Push Docker image to Docker Hub
        run: docker push "${{ secrets.DOCKER_USERNAME }}"/myblazorapp:latest

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      
      - name: Deploy visa SSH
        uses: D3rHase/ssh-command-action@v0.2.2
        with:
          host: ${{secrets.SSH_HOST}} # Remote server address / ip - required
          port: ${{secrets.SSH_PORT}} # Remote server port -  Default: 22 - optional
          user: ${{secrets.SSH_USERNAME}} # Remote server user - required
          private_key: ${{secrets.SSH_PRIVATE_KEY}} # Private ssh key registered on the remote server - required
          command: "powershell -File ./deploy_docker.ps1"

      - name: Send Slack notification
        if: always()  # Ensure this step runs even if previous steps fail
        run: |
         SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
         STATUS="exitoso :D"
         if [ "${{ job.status }}" != "success" ]; then
           STATUS="Fallido :´("
         fi
         COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
         AUTHOR="${{ github.event.head_commit.author.name }}"
         COMMIT_URL="${{ github.event.head_commit.url }}"
         MESSAGE="Despliegue ${STATUS}: Tarea ${{ github.job }} en  workflow ${{ github.workflow }} se completo con estatus ${{ job.status }}.\nMensaje del commit: ${COMMIT_MESSAGE}\nAutor: ${AUTHOR}\nCommit URL: ${COMMIT_URL}"
         curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MESSAGE}\"}" $SLACK_WEBHOOK_URL
        
      - name: Send success mail
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Pipeline Succeeded: ${{ github.workflow }}"
          body: "Exito! La última versión del app está publicada correctamente en DockerHub."
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}

      - name: Send failure mail
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Pipeline Failed: ${{ github.workflow }}"
          body: "Error :( Ocurrió un error y no se pudo publicar el app, revisa la ejecución para más detalles."
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}
