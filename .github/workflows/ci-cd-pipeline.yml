name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Usar la rama master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Actualizado a v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3  # Actualizado a v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./BlazorApp.csproj  # Ruta correcta

      - name: Build the app
        run: dotnet build --configuration Release ./BlazorApp.csproj  # Ruta correcta
      #-----------------------------------------------------------------------------------------------------------------
      #                         CORRO LAS PRUEBAS
      #-----------------------------------------------------------------------------------------------------------------
      - name: Run tests
        run: dotnet test --verbosity normal ./BlazorApp.Test/BlazorApp.Test.csproj  # Ruta correcta

      #-----------------------------------------------------------------------------------------------------------------
      #                         EJECUTO ANALISIS DE CODIGO CON SONAR CLOUD
      #-----------------------------------------------------------------------------------------------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: ./.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"jfberton_BlazorApp" /o:"jfberton" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
      #-----------------------------------------------------------------------------------------------------------------
      #  PUBLICO EL PROYECTO, CONSTRUYO LA IMAGEN DOCKER, LA TAGUEO COMO LAST Y LA PUBLICO EN DOCKERHUB
      #-----------------------------------------------------------------------------------------------------------------
      - name: Publish the app
        run: dotnet publish --configuration Release --output ./publish ./BlazorApp.csproj  # Ruta correcta

      - name: Build Docker image
        run: docker build -t myblazorapp:latest ./  # Construir la imagen desde el directorio correcto

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag Docker image
        run: docker tag myblazorapp:latest "${{ secrets.DOCKER_USERNAME }}"/myblazorapp:latest

      - name: Push Docker image to Docker Hub
        run: docker push "${{ secrets.DOCKER_USERNAME }}"/myblazorapp:latest

      #-----------------------------------------------------------------------------------------------------------------
      #  SI SE PUBLICO CORRECTAMENTE EN DOCKERHUB Y TIENE UNA TAREA ASOCIADA ACTUALIZO MANDO ESA TAREA A IN REVIEW
      #  EJEMPLO DE COMMIT MESSAGE: "Correccion de error, refs #42"
      #-----------------------------------------------------------------------------------------------------------------

      - name: Extract issue number from commit message
        id: extract-issue-number
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          issue_number=$(echo "$commit_message" | grep -oP '#\d+' | grep -oP '\d+' | head -1 || echo "")
          echo "::set-output name=issue_number::$issue_number"
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Version compatible de Node.js

      - name: Install octokit/core module
        run: npm install @octokit/core

      - name: Create updateIssue.js script
        run: |
          echo 'import { Octokit } from "@octokit/core";
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });

          async function updateIssue() {
            const project_name = "Mi super proyecto para Ing. de Software";
            const column_name = "In review";
            const issueNumber = process.env.ISSUE_NUMBER;

            const projects = await octokit.request("GET /repos/${{ github.repository_owner }}/${{ github.repository }}/projects");
            const project = projects.data.find(proj => proj.name === project_name);

            if (!project) {
              throw new Error(`Project ${project_name} not found`);
            }

            const columns = await octokit.request(`GET /projects/${project.id}/columns`);
            const column = columns.data.find(col => col.name === column_name);

            if (!column) {
              throw new Error(`Column ${column_name} not found`);
            }

            await octokit.request("POST /projects/columns/${column.id}/cards", {
              column_id: column.id,
              content_id: issueNumber,
              content_type: "Issue"
            });
          }

          updateIssue().catch(err => {
            console.error(err);
            process.exit(1);
          });' > updateIssue.js

      - name: Update issue status
        if: steps.extract-issue-number.outputs.issue_number != ''
        run: |
          ISSUE_NUMBER="${{ steps.extract-issue-number.outputs.issue_number }}" node ./BlazorApp/updateIssue.js
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      #-----------------------------------------------------------------------------------------------------------------
      #  ME LOGUEO A MI MAQUINA A TRAVÉS DE SSH CON REVERSE PROXY USANDO NGROK Y OBTENGO LA ULTIMA VERSION DE LA IMAGEN
      #  GENERO EL CONTENEDOR Y LO DEJO CORRIENDO
      #-----------------------------------------------------------------------------------------------------------------
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
      
      - name: Deploy visa SSH
        uses: D3rHase/ssh-command-action@v0.2.2
        with:
          host: ${{secrets.SSH_HOST}} # Remote server address / ip - required
          port: ${{secrets.SSH_PORT}} # Remote server port -  Default: 22 - optional
          user: ${{secrets.SSH_USERNAME}} # Remote server user - required
          private_key: ${{secrets.SSH_PRIVATE_KEY}} # Private ssh key registered on the remote server - required
          command: "powershell -File ./deploy_docker.ps1"

      #-----------------------------------------------------------------------------------------------------------------
      #      ENVIO LAS NOTIFICACIONES DE COMO EJECUTO TODO
      #-----------------------------------------------------------------------------------------------------------------
      - name: Send Slack notification
        if: always()  # Ensure this step runs even if previous steps fail
        run: |
         SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}
         STATUS="exitoso :D"
         if [ "${{ job.status }}" != "success" ]; then
           STATUS="Fallido :´("
         fi
         COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
         AUTHOR="${{ github.event.head_commit.author.name }}"
         COMMIT_URL="${{ github.event.head_commit.url }}"
         MESSAGE="Despliegue ${STATUS}: Tarea ${{ github.job }} en  workflow ${{ github.workflow }} se completo con estatus ${{ job.status }}.\nMensaje del commit: ${COMMIT_MESSAGE}\nAutor: ${AUTHOR}\nCommit URL: ${COMMIT_URL}"
         curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MESSAGE}\"}" $SLACK_WEBHOOK_URL
        
      - name: Send success mail
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Pipeline Succeeded: ${{ github.workflow }}"
          body: "Exito! La última versión del app está publicada correctamente en DockerHub."
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}

      - name: Send failure mail
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Pipeline Failed: ${{ github.workflow }}"
          body: "Error :( Ocurrió un error y no se pudo publicar el app, revisa la ejecución para más detalles."
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}
