name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Usar la rama master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Actualizado a v3

      - name: Set up .NET
        uses: actions/setup-dotnet@v3  # Actualizado a v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./BlazorApp.csproj  # Ruta correcta

      - name: Build the app
        run: dotnet build --configuration Release ./BlazorApp.csproj  # Ruta correcta

      - name: Run tests
        run: dotnet test --verbosity normal ./BlazorApp.Test/BlazorApp.Test.csproj  # Ruta correcta

      - name: Publish the app
        run: dotnet publish --configuration Release --output ./publish ./BlazorApp.csproj  # Ruta correcta

      - name: Build Docker image
        run: docker build -t myblazorapp:latest ./  # Construir la imagen desde el directorio correcto

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Tag Docker image
        run: docker tag myblazorapp:latest "${{ secrets.DOCKER_USERNAME }}"/myblazorapp:latest

      - name: Push Docker image to Docker Hub
        run: docker push "${{ secrets.DOCKER_USERNAME }}"/myblazorapp:latest

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add SSH Known Hosts
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts

      - name: Deploy to local server via SSH
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Detener el contenedor existente llamado myblazorapp, si existe
            docker stop myblazorapp || echo "No existe el contenedor myblazorapp"
            
            # Eliminar el contenedor existente llamado myblazorapp, si existe
            docker rm myblazorapp || echo "No existe el contenedor myblazorapp"
            
            # Eliminar las imágenes dangling (sin etiquetas)
            docker image prune -f
            
            # Descargar la última versión de la imagen myblazorapp desde el repositorio
            docker pull yourusername/myblazorapp:latest
            
            # Ejecutar un nuevo contenedor con la imagen descargada, exponiendo el puerto 8080
            docker run -d -p 8080:80 --name myblazorapp yourusername/myblazorapp:latest
            
            # Esperar 10 segundos para que el contenedor se inicie completamente
            timeout /t 10
            
            # Asignar el ID del contenedor a la variable CONTAINER_ID si el contenedor está corriendo
            FOR /F "tokens=*" %%i IN ('docker ps -q -f name=myblazorapp') DO set CONTAINER_ID=%%i
            
            # Verificar si la variable CONTAINER_ID está definida (lo que significa que el contenedor está corriendo)
            IF DEFINED CONTAINER_ID (
              # Si el contenedor está corriendo, imprimir un mensaje de éxito
              echo El contenedor myblazorapp está corriendo.
            ) ELSE (
              # Si el contenedor no está corriendo, imprimir un mensaje de error y mostrar los logs del contenedor
              echo El contenedor myblazorapp no está corriendo. Mostrando logs:
              docker logs myblazorapp
            )
            
      - name: Send success mail
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Pipeline Succeeded: ${{ github.workflow }}"
          body: "Exito! La última versión del app está publicada correctamente en DockerHub."
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}

      - name: Send failure mail
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Pipeline Failed: ${{ github.workflow }}"
          body: "Error :( Ocurrió un error y no se pudo publicar el app, revisa la ejecución para más detalles."
          to: ${{ secrets.TO_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}
