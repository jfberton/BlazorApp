name: Mover Tarea a Columna Específica en Proyecto de Usuario

on:
  push:
    branches:
      - master

jobs:
  move_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extraer número de issue del mensaje del commit
        id: extract_issue_number
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          ISSUE_NUMBER=$(echo "$COMMIT_MESSAGE" | grep -oE '#[0-9]+' | tr -d '#')
          echo "::set-output name=issue_number::$ISSUE_NUMBER"
        
      - name: Mover issue al cambiar label
        if: steps.extract_issue_number.outputs.issue_number
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = parseInt("${{ steps.extract_issue_number.outputs.issue_number }}", 10);
            const project_name = 'Super proyecto'; // Reemplaza con el nombre de tu proyecto
            const column_name = 'In review'; // Reemplaza con el nombre de la columna deseada

            // Consulta GraphQL para obtener el ID del proyecto
            const projectIdQuery = `
              query ($login: String!, $projectName: String!) {
                user(login: $login) {
                  projectsV2(first: 100) {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
            `;

            // Ejecutar la consulta GraphQL para obtener el ID del proyecto
            const projectIdResponse = await github.graphql(projectIdQuery, {
              login: context.repo.owner,
              projectName: project_name
            });

            const project = projectIdResponse.user.projectsV2.nodes.find(project => project.title === project_name);
            if (!project) {
              throw new Error(`Project '${project_name}' not found`);
            }
            const projectId = project.id;

            // Consulta GraphQL para obtener las columnas del proyecto
            const columnsQuery = `
              query ($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 100) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            // Ejecutar la consulta GraphQL para obtener las columnas del proyecto
            const columnsResponse = await github.graphql(columnsQuery, {
              projectId: projectId
            });

            const column = columnsResponse.node.fields.nodes
              .filter(field => field.options)
              .flatMap(field => field.options)
              .find(option => option.name === column_name);

            if (!column) {
              throw new Error(`Column '${column_name}' not found in project '${project_name}'`);
            }

            const columnId = column.id;

            // Consulta GraphQL para mover el issue
            const moveIssueMutation = `
              mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: ID!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: {
                    singleSelectOptionId: $optionId
                  }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            // Ejecutar la mutación GraphQL para mover el issue
            await github.graphql(moveIssueMutation, {
              projectId: projectId,
              itemId: issue_number,
              fieldId: columnId,
              optionId: columnId
            });
          github-token: ${{ secrets.GITHUB_TOKEN }}
