name: Update state issue

on:
  push:
    branches:
      - master  # Usar la rama master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Actualizado a v3

      - name: Extract issue number from commit message
        id: extract-issue-number
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          issue_number=$(echo "$commit_message" | grep -oP '#\d+' | grep -oP '\d+' | head -1 || echo "")
          echo "::set-output name=issue_number::$issue_number"
      
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Version compatible de Node.js

      - name: Install octokit/core module
        run: npm install @octokit/core

      - name: Create updateIssue.mjs script
        run: |
              echo "import { Octokit } from '@octokit/core';
              
              const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
              
              async function updateIssue() {
                const project_name = 'Mi super proyecto para Ing. de Software';
                const column_name = 'In review';
                const issueNumber = process.env.ISSUE_NUMBER;
              
                const projects = await octokit.request('GET /repos/\${{ github.repository_owner }}/\${{ github.repository }}/projects');
                const project = projects.data.find(proj => proj.name === project_name);
              
                if (!project) {
                  throw new Error(\`Project \${project_name} not found\`);
                }
              
                const columns = await octokit.request(\`GET /projects/\${project.id}/columns\`);
                const column = columns.data.find(col => col.name === column_name);
              
                if (!column) {
                  throw new Error(\`Column \${column_name} not found\`);
                }
              
                const fetch = require('node-fetch');
                const response = await octokit.request('POST /projects/columns/\${column.id}/cards', {
                  column_id: column.id,
                  content_id: issueNumber,
                  content_type: 'Issue',
                  request: { fetch }
                });
              
                console.log('Issue updated successfully:', response.data);
              }
              
              updateIssue().catch(err => {
                console.error(err);
                process.exit(1);
              });
              
              export { updateIssue };" > /home/runner/work/BlazorApp/BlazorApp/updateIssue.mjs

      - name: Update issue status
        if: steps.extract-issue-number.outputs.issue_number != ''
        run: |
          ISSUE_NUMBER="${{ steps.extract-issue-number.outputs.issue_number }}" node --experimental-modules /home/runner/work/BlazorApp/BlazorApp/updateIssue.mjs
