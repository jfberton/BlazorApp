name: Update state issue

on:
  push:
    branches:
      - master  # Usar la rama master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # Actualizado a v3

      - name: Extract issue number from commit message
        id: extract-issue-number
        run: |
          commit_message="${{ github.event.head_commit.message }}"
          issue_number=$(echo "$commit_message" | grep -oP '#\d+' | grep -oP '\d+' | head -1 || echo "")
          echo "::set-output name=issue_number::$issue_number"
      
      - name: Install Node.js (updated version)
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Or any versiÃ³n 18 or higher

      - name: Install octokit/core module
        run: npm install @octokit/core

      - name: Install node-fetch (opcional, pero recomendado para Node.js v16)
        run: npm install node-fetch  # Este paso es nuevo

      - name: Crear script updateIssue.mjs
        run: |
          echo "import { Octokit } from '@octokit/core';
          import fetch from 'node-fetch';

          async function updateIssue() {
            const project_name = 'Mi super proyecto para Ing. de Software';
            const column_name = 'In review';
            const issueNumber = process.env.ISSUE_NUMBER;
            const owner = process.env.GITHUB_REPOSITORY_OWNER;
            const repo = process.env.GITHUB_REPOSITORY;
            const pat = process.env.PAT;
            
            const octokit = new Octokit({
              auth: {
                token: '${path}',
                tokenType: 'oauth',
              },
            });

            console.log('Owner: ${owner}');
            console.log('Repository: ${repo}');
            console.log('Issue Number: ${issueNumber}');

            const projects = await octokit.request(\'GET /repos/\${repo}/projects\');
            const project = projects.data.find(proj => proj.name === project_name);

            if (!project) {
              throw new Error(\'Proyecto \${project_name} no encontrado\');
            }

            const columns = await octokit.request(\'GET /projects/\${project.id}/columns\');
            const column = columns.data.find(col => col.name === column_name);

            if (!column) {
              throw new Error(\'Columna \${column_name} no encontrada\');
            }

            const response = await octokit.request('POST /projects/columns/\${column.id}/cards', {
              column_id: column.id,
              content_id: issueNumber,
              content_type: 'Issue',
              request: { fetch },
            });

            console.log('Estado del issue actualizado exitosamente:', response.data);
          }

          updateIssue().catch(err => {
            console.error(err);
            process.exit(1);
          });

          export { updateIssue };" > /home/runner/work/BlazorApp/BlazorApp/updateIssue.mjs

      - name: Actualizar estado del issue
        if: steps.extract-issue-number.outputs.issue_number != ''
        run: |
          ISSUE_NUMBER="${{ steps.extract-issue-number.outputs.issue_number }}"
          PAT="${{ secrets.MY_OTHER_PAT }}"
          GITHUB_REPOSITORY="${{ github.repository }}"
          
          node --experimental-modules /home/runner/work/BlazorApp/BlazorApp/updateIssue.mjs

      
